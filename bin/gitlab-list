#!/usr/bin/python

import httplib, urllib, json
import re
import unittest

_Host = "gitlab.office.moo.com"
_BaseUrl = "/api/v3"
_Token = ""

def connection():
    if not connection.connection:
        connection.connection = httplib.HTTPConnection(_Host, 80)  # SSL FFS
    return connection.connection
connection.connection = None


def get(url):
    connection().request('GET', _BaseUrl+'/'+url, None, {'PRIVATE-TOKEN': _Token})
    response = connection().getresponse()
    text = response.read()
    if not response.status == 200:
        raise AssertionError("Gitlab gave {} in response to {}".format(response.status, url))
    return json.loads(text)


def post(url, body):
    jsonBody = json.dumps(body)
    connection().request('POST', url, jsonBody, {'PRIVATE-TOKEN': _Token, 'Content-Type': 'application/json'})
    response = connection().getresponse()
    text = response.read()
    if not (response.status == 200 or response.status == 201):
        message = '?'
        try:
            message = json.loads(text)['message']
        except:
            pass
        raise AssertionError("Gitlab gave {} ({}) in response to {}".format(response.status, message, url))
    return json.loads(text)

def esc(repo_path):
    return urllib.quote(repo_path, '')  # / is not 'safe' here


from collections import defaultdict

evryting = get('projects?per_page=100')
helpful = defaultdict(list)
for e in evryting:
    helpful[e['namespace']['path']].append( (2-e['visibility_level']/10, e['name'], e['description']) )

for group, projects in helpful.iteritems():
    print
    print group
    for privateness, n, desc in sorted(projects):
        print ((2+privateness)*' ')+((2-privateness)*'*')+' '+n.ljust(30)+' - '+desc

print str(len(evryting))
assert (len(evryting) < 100)
